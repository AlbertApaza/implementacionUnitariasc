@{
    ViewBag.Title = "Reportes Dinámicos";
    // ViewBag.CurrentUserId se establece en la acción Index del controlador
}

<style>
    .chart-type-card {
        cursor: pointer;
        transition: all 0.2s ease;
        border: 2px solid transparent;
        min-height: 170px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

        .chart-type-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1);
        }

        .chart-type-card.selected {
            border-color: #0d6efd;
            background-color: rgba(13,110,253,0.05);
        }

    .chart-preview {
        height: 100px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-grow: 1;
    }

    .card-body.p-2.text-center {
        flex-shrink: 0;
    }

    .preview-container {
        height: 420px;
        position: relative;
    }

    #loadingOverlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255,255,255,0.75);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10;
    }

    .date-range-picker {
        border: 1px solid #ced4da;
        border-radius: .25rem;
        padding: .375rem .75rem;
        width: 100%;
    }

    .table th, .table td {
        vertical-align: middle;
        font-size: 0.9rem;
    }

    .table .btn-sm {
        padding: 0.2rem 0.4rem;
        font-size: 0.75rem;
    }

    .toast-container {
        z-index: 1100;
    }
</style>

<div class="container-fluid py-4">
    <!-- Encabezado -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h2">Crear Reporte Dinámico</h1>
            <p class="text-muted">Configure filtros, visualice y guarde sus reportes.</p>
        </div>
        <div>
            <button id="btnOpenSaveModal" class="btn btn-lg btn-primary d-flex align-items-center gap-2">
                <i class="fas fa-save"></i> Guardar Configuración Actual
            </button>
        </div>
    </div>

    <div class="row g-4">
        <!-- Panel de Configuración de Filtros -->
        <div class="col-lg-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light border-bottom">
                    <h5 class="card-title mb-0"><i class="fas fa-chart-pie me-2"></i>Tipo de Gráfico</h5>
                </div>
                <div class="card-body">
                    <div class="row g-2">
                        <div class="col-4"><div class="card chart-type-card selected" data-chart-type="line"><div class="chart-preview"><i class="fas fa-chart-line fa-2x text-primary"></i></div><div class="card-body p-2 text-center"><h6 class="card-title mb-0 small">Línea</h6></div></div></div>
                        <div class="col-4"><div class="card chart-type-card" data-chart-type="bar"><div class="chart-preview"><i class="fas fa-chart-bar fa-2x text-success"></i></div><div class="card-body p-2 text-center"><h6 class="card-title mb-0 small">Barras</h6></div></div></div>
                        <div class="col-4"><div class="card chart-type-card" data-chart-type="pie"><div class="chart-preview"><i class="fas fa-chart-pie fa-2x text-info"></i></div><div class="card-body p-2 text-center"><h6 class="card-title mb-0 small">Circular</h6></div></div></div>
                    </div>
                </div>
            </div>

            <div class="card shadow-sm">
                <div class="card-header bg-light border-bottom">
                    <h5 class="card-title mb-0"><i class="fas fa-filter me-2"></i>Filtros del Panel</h5>
                </div>
                <div class="card-body">
                    <input type="hidden" id="currentEditingReportId" value="0">
                    <div class="mb-3">
                        <label for="panelReportTitle" class="form-label">Título del Gráfico (Visualización)</label>
                        <input type="text" class="form-control form-control-sm" id="panelReportTitle" placeholder="Ej: Detecciones Mensuales">
                    </div>
                    <div class="mb-3">
                        <label for="panelDateRange" class="form-label">Rango de Fechas</label>
                        <input type="text" class="date-range-picker form-control-sm" id="panelDateRange">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Tipo de Detección</label>
                        <div class="form-check"><input class="form-check-input" type="checkbox" id="panelCheckPersonas" checked><label class="form-check-label small" for="panelCheckPersonas">Personas Sospechosas</label></div>
                        <div class="form-check"><input class="form-check-input" type="checkbox" id="panelCheckArmasBlancas" checked><label class="form-check-label small" for="panelCheckArmasBlancas">Armas Blancas</label></div>
                        <div class="form-check"><input class="form-check-input" type="checkbox" id="panelCheckArmasFuego" checked><label class="form-check-label small" for="panelCheckArmasFuego">Armas de Fuego</label></div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label" for="panelSeverityFilter">Severidad</label>
                        <select class="form-select form-select-sm" id="panelSeverityFilter">
                            <option value="all" selected>Todas</option>
                            <option value="Critical">Crítico</option>
                            <option value="High">Alto</option>
                            <option value="Medium">Medio</option>
                            <option value="Low">Bajo</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label" for="panelGroupByFilter">Agrupar Por</label>
                        <select class="form-select form-select-sm" id="panelGroupByFilter">
                            <option value="day">Día</option>
                            <option value="week">Semana</option>
                            <option value="month" selected>Mes</option>
                            <option value="type">Tipo Detección</option>
                            <option value="severity">Severidad</option>
                        </select>
                    </div>
                </div>
                <div class="card-footer bg-light">
                    <button id="btnApplyPanelFilters" class="btn btn-primary w-100 mb-2"><i class="fas fa-sync-alt me-2"></i>Actualizar Gráfico</button>
                    <button id="btnResetPanel" class="btn btn-outline-secondary w-100 btn-sm"><i class="fas fa-undo me-1"></i>Restablecer Panel</button>
                </div>
            </div>
        </div>

        <!-- Panel de Previsualización y Lista de Reportes Guardados -->
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-light border-bottom">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0" id="chartPreviewTitle"><i class="fas fa-chart-area me-2"></i>Previsualización del Gráfico</h5>
                        <button id="btnExportChartImage" class="btn btn-outline-success btn-sm"><i class="fas fa-file-image me-1"></i>Exportar PNG</button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="preview-container">
                        <div id="loadingOverlay" style="display: none;"><div class="spinner-border text-primary"></div><span class="ms-2 fw-bold">Cargando datos...</span></div>
                        <canvas id="previewChartCanvas"></canvas>
                    </div>
                </div>
            </div>

            <div class="card shadow-sm mt-4">
                <div class="card-header bg-light border-bottom">
                    <h5 class="card-title mb-0"><i class="fas fa-list-alt me-2"></i>Configuraciones Guardadas</h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover table-striped mb-0">
                            <thead class="table-light"><tr><th>Nombre</th><th>Tipo Gráfico</th><th>Creado</th><th>Público</th><th class="text-center">Acciones</th></tr></thead>
                            <tbody id="savedReportsTableBody">
                                <tr><td colspan="5" class="text-center p-4 fst-italic">Cargando configuraciones...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Guardar Configuración / Editar Metadatos -->
<div class="modal fade" id="saveReportConfigModal" tabindex="-1" aria-labelledby="saveModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow-lg">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="saveModalLabel"><i class="fas fa-save me-2"></i>Guardar Configuración</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="modalReportName" class="form-label">Nombre del Reporte <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="modalReportName" placeholder="Ej: Reporte Mensual de Detecciones Críticas" required>
                </div>
                <div class="mb-3">
                    <label for="modalReportDescription" class="form-label">Descripción (Opcional)</label>
                    <textarea class="form-control" id="modalReportDescription" rows="3" placeholder="Breve descripción del propósito y contenido del reporte"></textarea>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="modalIsPublic">
                    <label class="form-check-label" for="modalIsPublic">Hacer este reporte público para otros usuarios</label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btnConfirmSaveConfigOnModal"><i class="fas fa-check me-2"></i>Confirmar y Guardar</button>
            </div>
        </div>
    </div>
</div>

<!-- Contenedor de Toasts para Notificaciones -->
<div class="position-fixed bottom-0 end-0 p-3 toast-container">
    <div id="appNotificationToast" class="toast align-items-center" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
        <div class="d-flex">
            <div class="toast-body" id="appToastBody"></div>
            <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
    @* jQuery debe estar cargado, usualmente en _Layout.cshtml *@
    <script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        let previewChartInstance;
        const previewChartCanvasCtx = document.getElementById('previewChartCanvas').getContext('2d');
        const loadingSpinnerElement = document.getElementById('loadingOverlay');
        let saveConfigModalInstance;
        let appNotificationToastInstance;
        const JS_CURRENT_USER_ID = @(ViewBag.CurrentUserId ?? -1);

        const URL_GET_CHART_DATA = '@Url.Action("GetDeteccionData", "Reportes")';
        const URL_SAVE_REPORT_CONFIG = '@Url.Action("SaveReportConfiguration", "Reportes")';
        const URL_GET_SAVED_CONFIGS = '@Url.Action("GetSavedReports", "Reportes")';
        const URL_DELETE_SAVED_CONFIG = '@Url.Action("DeleteReport", "Reportes")';

        function showAppNotification(message, type = 'info') {
            const toastBody = $('#appToastBody');
            const toastEl = $('#appNotificationToast');
            toastBody.text(message);
            toastEl.removeClass('text-bg-success text-bg-danger text-bg-warning text-bg-info');
            let toastClass = 'text-bg-info';
            if (type === 'success') toastClass = 'text-bg-success';
            else if (type === 'error') toastClass = 'text-bg-danger';
            else if (type === 'warning') toastClass = 'text-bg-warning';
            toastEl.addClass(toastClass);
            if (!appNotificationToastInstance) { // Asegurar que la instancia exista
                 appNotificationToastInstance = new bootstrap.Toast(document.getElementById('appNotificationToast'));
            }
            appNotificationToastInstance.show();
        }

        function toggleLoadingSpinner(show) {
            loadingSpinnerElement.style.display = show ? 'flex' : 'none';
        }

        function getCurrentPanelFilters() {
            const dateRangePicker = $('#panelDateRange').data('daterangepicker');
            return {
                ReportTitle: $('#panelReportTitle').val().trim(),
                StartDate: dateRangePicker.startDate.format('DD/MM/YYYY'),
                EndDate: dateRangePicker.endDate.format('DD/MM/YYYY'),
                CheckPersonas: $('#panelCheckPersonas').is(':checked'),
                CheckArmasBlancas: $('#panelCheckArmasBlancas').is(':checked'),
                CheckArmasFuego: $('#panelCheckArmasFuego').is(':checked'),
                SeverityFilter: $('#panelSeverityFilter').val(),
                GroupByFilter: $('#panelGroupByFilter').val()
            };
        }

        function applyFiltersToPanelUI(filtersObject) {
            $('#panelReportTitle').val(filtersObject.ReportTitle || '');
            if (filtersObject.StartDate && filtersObject.EndDate) {
                try {
                    $('#panelDateRange').data('daterangepicker').setStartDate(moment(filtersObject.StartDate, "DD/MM/YYYY"));
                    $('#panelDateRange').data('daterangepicker').setEndDate(moment(filtersObject.EndDate, "DD/MM/YYYY"));
                } catch (e) { console.warn("Error aplicando fechas al daterangepicker:", e); }
            }
            $('#panelCheckPersonas').prop('checked', filtersObject.CheckPersonas === true);
            $('#panelCheckArmasBlancas').prop('checked', filtersObject.CheckArmasBlancas === true);
            $('#panelCheckArmasFuego').prop('checked', filtersObject.CheckArmasFuego === true);
            $('#panelSeverityFilter').val(filtersObject.SeverityFilter || 'all');
            $('#panelGroupByFilter').val(filtersObject.GroupByFilter || 'month');
        }

        function getSelectedChartTypeFromPanel() {
            return $('.chart-type-card.selected').data('chart-type') || 'line';
        }

        function fetchAndUpdateChart() {
            const chartType = getSelectedChartTypeFromPanel();
            const filters = getCurrentPanelFilters();
            toggleLoadingSpinner(true);
            const chartTitleElement = $('#chartPreviewTitle');
            chartTitleElement.html(`<i class="fas fa-spinner fa-spin me-2"></i>Actualizando: ${filters.ReportTitle || 'Gráfico...'}`);

            console.log("Enviando filtros a GetDeteccionData:", JSON.stringify(filters)); // DEBUG

            $.ajax({
                url: URL_GET_CHART_DATA, type: 'POST', contentType: 'application/json',
                data: JSON.stringify(filters),
                success: function (response) {
                    console.log("Respuesta de GetDeteccionData:", response); // DEBUG
                    if (response.success && response.data) {
                        renderChartOnCanvas(chartType, response.data, filters.ReportTitle);
                        chartTitleElement.html(`<i class="fas fa-chart-area me-2"></i>${filters.ReportTitle || 'Previsualización del Gráfico'}`);
                    } else {
                        showAppNotification(response.message || 'No se pudieron cargar los datos para el gráfico.', 'error');
                        renderChartOnCanvas(chartType, [], filters.ReportTitle);
                        chartTitleElement.html(`<i class="fas fa-exclamation-triangle me-2"></i>Error al cargar: ${filters.ReportTitle || 'Gráfico...'}`);
                    }
                },
                error: function (xhr) {
                    showAppNotification('Error de comunicación con el servidor al obtener datos.', 'error');
                    console.error("AJAX Error (GetDeteccionData):", xhr.status, xhr.responseText);
                    renderChartOnCanvas(chartType, [], filters.ReportTitle);
                    chartTitleElement.html(`<i class="fas fa-exclamation-triangle me-2"></i>Fallo de red: ${filters.ReportTitle || 'Gráfico...'}`);
                },
                complete: function () { toggleLoadingSpinner(false); }
            });
        }

        function renderChartOnCanvas(chartType, apiChartData, chartTitleText) {
            if (previewChartInstance) previewChartInstance.destroy();

            const labels = apiChartData.map(item => item.Label);
            const dataValues = apiChartData.map(item => item.Value);
            const displayTitle = chartTitleText || `Gráfico de ${chartType}`;

            let chartConfiguration = {
                type: chartType,
                data: { labels: labels, datasets: [] },
                options: {
                    responsive: true, maintainAspectRatio: false,
                    scales: (chartType !== 'pie' && chartType !== 'doughnut') ? {
                        y: { beginAtZero: true, title: { display: true, text: 'Conteo' } },
                        x: { title: { display: true, text: $('#panelGroupByFilter option:selected').text() || 'Categoría' } }
                    } : {},
                    plugins: {
                        legend: { display: (chartType === 'pie' || chartType === 'doughnut'), position: 'top' },
                        tooltip: { callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || context.label || '';
                                if (label) label += ': ';
                                if (context.parsed && context.parsed.y !== undefined && (chartType==='line' || chartType==='bar')) {
                                    label += context.parsed.y;
                                } else if (context.raw !== undefined && (chartType==='pie' || chartType==='doughnut')) {
                                    label = context.label + ': ' + context.raw;
                                    const total = context.chart.config.data.datasets[0].data.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                                    const percentage = total > 0 ? Math.round((parseFloat(context.raw) / total) * 100) : 0;
                                    label += ` (${percentage}%)`;
                                }
                                return label;
                            }
                        }}
                    }
                }
            };

            if (apiChartData.length === 0) {
                chartConfiguration.data.labels = ['No hay datos disponibles para los filtros seleccionados.'];
                chartConfiguration.data.datasets.push({ label: 'Sin Datos', data: [] });
                 $('#chartPreviewTitle').html(`<i class="fas fa-info-circle me-2"></i>${displayTitle} (Sin datos)`);
            } else {
                 $('#chartPreviewTitle').html(`<i class="fas fa-chart-area me-2"></i>${displayTitle}`);
                if (chartType === 'line') {
                    chartConfiguration.data.datasets.push({ label: displayTitle, data: dataValues, borderColor: '#0d6efd', tension: 0.1, backgroundColor: 'rgba(13,110,253,0.1)', fill: true });
                } else if (chartType === 'bar') {
                    chartConfiguration.data.datasets.push({ label: displayTitle, data: dataValues, backgroundColor: getDefaultChartColors(dataValues.length) });
                } else if (chartType === 'pie' || chartType === 'doughnut') {
                    chartConfiguration.data.datasets.push({ data: dataValues, backgroundColor: getDefaultChartColors(dataValues.length) });
                }
            }
            previewChartInstance = new Chart(previewChartCanvasCtx, chartConfiguration);
        }

        function getDefaultChartColors(count) {
            const baseColors = ['#0d6efd', '#198754', '#ffc107', '#dc3545', '#6f42c1', '#fd7e14', '#20c997', '#0dcaf0', '#d63384', '#adb5bd'];
            return Array.from({ length: count }, (_, i) => baseColors[i % baseColors.length]);
        }

        function loadSavedReportConfigurations() {
            toggleLoadingSpinner(true);
            console.log("Cargando configuraciones guardadas..."); //DEBUG
            $.get(URL_GET_SAVED_CONFIGS)
                .done(function (response) {
                    console.log("Respuesta de GetSavedReports:", response); //DEBUG
                    const tableBody = $('#savedReportsTableBody').empty();
                    if (response.success && response.data && response.data.length > 0) {
                        response.data.forEach(config => {
                            const isOwner = config.IdUsuarioCreador === JS_CURRENT_USER_ID;
                            const row = $(`<tr>
                                <td>${$('<div/>').text(config.Nombre).html()}</td>
                                <td><i class="fas fa-chart-${config.TipoGrafico} text-primary me-1"></i> ${config.TipoGrafico.charAt(0).toUpperCase() + config.TipoGrafico.slice(1)}</td>
                                <td>${moment(config.FechaCreacion).format('DD/MM/YY HH:mm')}</td>
                                <td><span class="badge bg-${config.EsPublico ? 'success' : 'secondary'}">${config.EsPublico ? 'Sí' : 'No'}</span></td>
                                <td class="text-center">
                                    <button class="btn btn-sm btn-outline-primary btn-load-saved-config" title="Cargar Configuración en Panel"><i class="fas fa-eye"></i></button>
                                    ${isOwner ? `
                                    <button class="btn btn-sm btn-outline-info btn-edit-saved-metadata" title="Editar Nombre/Descripción/Visibilidad"><i class="fas fa-edit"></i></button>
                                    <button class="btn btn-sm btn-outline-danger btn-delete-saved-config" title="Eliminar Configuración"><i class="fas fa-trash"></i></button>` : ''}
                                </td>
                            </tr>`);
                            row.find('.btn-load-saved-config').data('reportConfig', config);
                            if(isOwner) {
                                 row.find('.btn-edit-saved-metadata').data('reportConfig', config);
                                 row.find('.btn-delete-saved-config').data('reportConfig', config);
                            }
                            tableBody.append(row);
                        });
                    } else {
                        tableBody.append('<tr><td colspan="5" class="text-center p-4 fst-italic">No hay configuraciones de reporte guardadas.</td></tr>');
                        if(!response.success) showAppNotification(response.message || 'No se pudieron cargar las configuraciones guardadas.', 'error');
                    }
                })
                .fail(function(xhr){
                    showAppNotification('Error de servidor al cargar configuraciones guardadas.', 'error');
                    console.error("AJAX Error (GetSavedReports):", xhr.status, xhr.responseText);
                    $('#savedReportsTableBody').empty().append('<tr><td colspan="5" class="text-center p-4 fst-italic text-danger">Error al cargar configuraciones.</td></tr>');
                })
                .always(() => toggleLoadingSpinner(false));
        }

        function resetPanelToDefaultState() {
            $('#currentEditingReportId').val('0');
            applyFiltersToPanelUI({
                ReportTitle: '', StartDate: moment().subtract(29, 'days').format('DD/MM/YYYY'), EndDate: moment().format('DD/MM/YYYY'),
                CheckPersonas: true, CheckArmasBlancas: true, CheckArmasFuego: true,
                SeverityFilter: 'all', GroupByFilter: 'month'
            });
            $('.chart-type-card').removeClass('selected').first().addClass('selected');
            fetchAndUpdateChart();
        }

        $(document).ready(function () {
            saveConfigModalInstance = new bootstrap.Modal(document.getElementById('saveReportConfigModal'));
            // Inicializar toast solo si el elemento existe
            if (document.getElementById('appNotificationToast')) {
                appNotificationToastInstance = new bootstrap.Toast(document.getElementById('appNotificationToast'));
            }


            $('#panelDateRange').daterangepicker({
                opens: 'left',
                locale: { format: 'DD/MM/YYYY', applyLabel: 'Aplicar', cancelLabel: 'Cancelar', daysOfWeek: moment.weekdaysMin(), monthNames: moment.monthsShort() },
                startDate: moment().subtract(29, 'days'),
                endDate: moment(),
                ranges: {
                   'Hoy': [moment(), moment()], 'Ayer': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Últimos 7 Días': [moment().subtract(6, 'days'), moment()], 'Últimos 30 Días': [moment().subtract(29, 'days'), moment()],
                   'Este Mes': [moment().startOf('month'), moment().endOf('month')], 'Mes Pasado': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            });

            resetPanelToDefaultState();
            loadSavedReportConfigurations();

            $('.chart-type-card').on('click', function () {
                $('.chart-type-card').removeClass('selected');
                $(this).addClass('selected');
                fetchAndUpdateChart();
            });

            $('#btnApplyPanelFilters').on('click', fetchAndUpdateChart);
            $('#btnResetPanel').on('click', resetPanelToDefaultState);

            $('#btnOpenSaveModal').on('click', function() {
                const editingId = $('#currentEditingReportId').val();
                if (editingId && editingId !== '0') {
                    // Los datos del modal se llenan si se hizo clic en 'btn-edit-saved-metadata'
                     $('#saveModalLabel').html('<i class="fas fa-edit me-2"></i>Editar Metadatos del Reporte');
                } else {
                    $('#currentEditingReportId').val('0');
                    $('#modalReportName').val($('#panelReportTitle').val() || '');
                    $('#modalReportDescription').val('');
                    $('#modalIsPublic').prop('checked', false);
                    $('#saveModalLabel').html('<i class="fas fa-save me-2"></i>Guardar Nueva Configuración');
                }
                saveConfigModalInstance.show();
            });

            $('#btnConfirmSaveConfigOnModal').on('click', function() {
                const configPayload = {
                    IdReporte: parseInt($('#currentEditingReportId').val()) || 0,
                    NombreModal: $('#modalReportName').val().trim(),
                    DescripcionModal: $('#modalReportDescription').val().trim(),
                    EsPublicoModal: $('#modalIsPublic').is(':checked'),
                    TipoGraficoPanel: getSelectedChartTypeFromPanel(),
                    FiltrosPanel: getCurrentPanelFilters()
                };

                if (!configPayload.NombreModal) {
                    showAppNotification('El nombre del reporte es obligatorio.', 'warning');
                    $('#modalReportName').focus(); return;
                }
                toggleLoadingSpinner(true);
                console.log("Enviando a SaveReportConfiguration:", JSON.stringify(configPayload)); // DEBUG

                $.ajax({
                    url: URL_SAVE_REPORT_CONFIG, type: 'POST', contentType: 'application/json',
                    data: JSON.stringify(configPayload),
                    success: function(response) {
                        console.log("Respuesta de SaveReportConfiguration:", response); // DEBUG
                        if (response.success) {
                            showAppNotification(response.message || 'Configuración guardada exitosamente.', 'success');
                            saveConfigModalInstance.hide();
                            loadSavedReportConfigurations();
                            if (configPayload.IdReporte === 0) {
                                $('#currentEditingReportId').val('0');
                            }
                        } else { showAppNotification(response.message || 'No se pudo guardar la configuración.', 'error'); }
                    },
                    error: function(xhr) { showAppNotification('Error de servidor al guardar la configuración.', 'error'); console.error("AJAX Error (SaveReportConfiguration):", xhr.status, xhr.responseText); },
                    complete: function() { toggleLoadingSpinner(false); }
                });
            });

            $('#savedReportsTableBody').on('click', '.btn-load-saved-config', function() {
                const savedConfig = $(this).data('reportConfig');
                $('#currentEditingReportId').val(savedConfig.IdReporte);
                $('.chart-type-card').removeClass('selected');
                $(`.chart-type-card[data-chart-type="${savedConfig.TipoGrafico}"]`).addClass('selected');
                try {
                    const filtersObject = JSON.parse(savedConfig.FiltrosJson);
                    applyFiltersToPanelUI(filtersObject);
                } catch(e) {
                    showAppNotification('Error al parsear los filtros de la configuración guardada.', 'error');
                    console.error("Error parsing FiltrosJson:", e, savedConfig.FiltrosJson);
                    resetPanelToDefaultState(); return;
                }
                fetchAndUpdateChart();
                showAppNotification(`'${savedConfig.Nombre}' cargado en el panel.`, 'info');
            });

            $('#savedReportsTableBody').on('click', '.btn-edit-saved-metadata', function() {
                const savedConfig = $(this).data('reportConfig');
                $('#currentEditingReportId').val(savedConfig.IdReporte);
                $('#modalReportName').val(savedConfig.Nombre);
                $('#modalReportDescription').val(savedConfig.Descripcion || '');
                $('#modalIsPublic').prop('checked', savedConfig.EsPublico === true);
                $('#saveModalLabel').html('<i class="fas fa-edit me-2"></i>Editar Metadatos del Reporte');
                saveConfigModalInstance.show();
            });

            $('#savedReportsTableBody').on('click', '.btn-delete-saved-config', function() {
                const savedConfig = $(this).data('reportConfig');
                if (confirm(`¿Está seguro de que desea eliminar la configuración de reporte "${savedConfig.Nombre}"?`)) {
                    toggleLoadingSpinner(true);
                    $.post(URL_DELETE_SAVED_CONFIG, { idReporte: savedConfig.IdReporte })
                        .done(function(response) {
                            if (response.success) {
                                showAppNotification(response.message || 'Configuración eliminada.', 'success');
                                loadSavedReportConfigurations();
                            } else { showAppNotification(response.message || 'No se pudo eliminar la configuración.', 'error'); }
                        })
                        .fail(function(xhr) {
                            showAppNotification('Error de servidor al eliminar la configuración.', 'error');
                            console.error("AJAX Error (DeleteReport):", xhr.status, xhr.responseText);
                        })
                        .always(() => toggleLoadingSpinner(false));
                }
            });

            $('#btnExportChartImage').on('click', function() {
                if (previewChartInstance && previewChartInstance.canvas) {
                    try {
                        const imageURL = previewChartInstance.toBase64Image('image/png', 1.0);
                        const link = document.createElement('a');
                        link.href = imageURL;
                        const title = ($('#chartPreviewTitle').text() || 'grafico_reporte').replace(/[^a-z0-9]/gi, '_').toLowerCase();
                        link.download = `${title}.png`;
                        document.body.appendChild(link); link.click(); document.body.removeChild(link);
                    } catch (e) {
                        showAppNotification('No se pudo generar la imagen del gráfico.', 'error');
                        console.error("Error exportando imagen del gráfico: ", e);
                    }
                } else {
                    showAppNotification('No hay gráfico cargado para exportar.', 'warning');
                }
            });
        });
    </script>
}